% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list_merge.R
\name{list_merge}
\alias{list_merge}
\title{Merge lists accounting for empty lists}
\usage{
list_merge(...)
}
\arguments{
\item{...}{named lists}
}
\description{
This function is a wrapper for \code{\link[rlist]{list.merge}}. The difference is that this function first screens out any empty lists, which cause errors for \code{\link[rlist]{list.merge}}. If there is only one non-empty list, this is returned. Otherwise, \code{\link[rlist]{list.merge}} is used to merge lists in an iterative process. For large lists, this approach will be slower than calling \code{\link[rlist]{list.merge}} directly if there are no empty lists. Both \code{\link[rlist]{list.merge}} and \code{list_merge()} require named lists.
}
\examples{

#### (1) rlist::list.merge() returns an error for empty lists
\dontrun{
  rlist::list.merge(list(a = 1), list(b = 2, c = 5, a = list(d = 1)), list())
  }

#### (2) rlist::list.merge() requires non empty lists:
rlist::list.merge(list(a = 1), list(b = 2, c = 5, a = list(d = 1)))

#### (3) list_merge() ignores empty lists, returning output identical to rlist::list.merge():
list_merge(list(a = 1), list(b = 2, c = 5, a = list(d = 1)), list())

#### (4) rlist::list.merge() and list_merge() require named lists,
# ... so the following code returns an error in both cases:
\dontrun{
  rlist::list.merge(list(a = 1), list(b = 2, c = 5, a = list(d = 1)), list(1))
  list_merge(list(a = 1), list(b = 2, c = 5, a = list(d = 1)), list(1))
}

}
\author{
Edward Lavender
}
